version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" 
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    volumes:
      - kafka_data:/var/lib/kafka/data
    logging:
      options:
        max-size: "10m"
        max-file: "5"

  api:
    build: .
    command: uvicorn api_service:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      orchestrator:
        condition: service_started
    environment:
      KAFKA_BROKER: "kafka:9092"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./logs:/app/logs

  orchestrator:
    build: .
    command: python orchestrator_service.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:9092"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f orchestrator_service.py || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  runner:
    build: .
    command: python runner_service.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:9092"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f runner_service.py || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  object_detection:
    build: .
    command: python object_detection_service.py
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: "kafka:9092"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f object_detection_service.py || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  video_output:
    build: .
    command: python video_output_service.py
    depends_on:
      kafka:
        condition: service_healthy
      object_detection:
        condition: service_started
    environment:
      KAFKA_BROKER: "kafka:9092"
    restart: always

volumes:
  kafka_data:
